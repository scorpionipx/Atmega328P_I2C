
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000971  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	23 e0       	ldi	r18, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_I2C_as_slave>:


void init_I2C_as_slave(unsigned char address)
{
	// TWI Bit Rate Register
	TWBR = 0x48; // 72 divider for standard 100kbps SCL
  90:	98 e4       	ldi	r25, 0x48	; 72
  92:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	// TWI Status Register
	TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // prescaler 1 for standard 100kbps SCL
  96:	e9 eb       	ldi	r30, 0xB9	; 185
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	9c 7f       	andi	r25, 0xFC	; 252
  9e:	90 83       	st	Z, r25
	
	// TWI (Slave) Address Register
	TWAR = (address << 1) + 1; // load the 7bits address into the MSBs
  a0:	88 0f       	add	r24, r24
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	
	// TWI Control Register
	TWCR |= ((1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE)); // set TWI's Interrupt Flag, Enable Acknowledge, Enable and Interrupt Enable
  a8:	ec eb       	ldi	r30, 0xBC	; 188
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	85 6c       	ori	r24, 0xC5	; 197
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <init_uC>:
}

void init_uC(void)
{
	
	DDRB = 0xFF; //PORTB output
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB = 1 << BUILTIN_LED;
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	85 b9       	out	0x05, r24	; 5
	
	TEST_BLINK = TRUE;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	init_I2C_as_slave(ADDRESS);
  c2:	83 e1       	ldi	r24, 0x13	; 19
  c4:	0e 94 48 00 	call	0x90	; 0x90 <init_I2C_as_slave>
	
	sei(); // enable global interrupts
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <led_blink>:
}

void led_blink(void)
{
	PORTB &= ~(1 << BUILTIN_LED);
  cc:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <led_blink+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <led_blink+0x12>
  de:	00 00       	nop
	_delay_ms(50);
	PORTB = 1 << BUILTIN_LED;
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	82 e5       	ldi	r24, 0x52	; 82
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <led_blink+0x1e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <led_blink+0x28>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <main>:
void init_uC(void);
void led_blink(void);

int main(void)
{
	init_uC();
  f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_uC>
	
    while (1) 
    {
		if(TEST_BLINK)
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	88 23       	and	r24, r24
 102:	f1 f3       	breq	.-4      	; 0x100 <main+0x8>
		{
			led_blink();	
 104:	0e 94 66 00 	call	0xcc	; 0xcc <led_blink>
 108:	f9 cf       	rjmp	.-14     	; 0xfc <main+0x4>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
